# Python file to plot the graphs using data generated by the numerical scheme
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from itertools import count

# first we need to get the mode in which the program is run by the user
def get_env():
    """
        Function to extract the mode in which the user has run the simulations
        -> [COMPLETE] Single instance , store data for each time step
        -> [PARTIAL] Single instance , store data only for initial and final steps
        -> [PLOT-PARTIAL] Two instances , store data only for initial and final steps
        -> [ANIMATE-ALL] Two instances , store data for each time step
    """

    env = {}

    with open("env/env.txt", "r") as f:
        lines = f.readlines()

    env["mode"] = lines[0][:-1]
    env["problem"] = lines[1][:-1]
    env["grid points"] = int(lines[2][:-1])
    env["domain"] = list(map(float, lines[3].split(" ")))

    return env

def get_grid(path):
    """
        Function to get the x-axix grid for simulation given it's path
    """

    with open(path, "r") as f:
        grid = list(map(float, f.readline().split(' ')[:-1]))

    return grid

def get_vars(file_name):
    """
        Function to read one file containing values of a variable in a 
        single 2D vector for all the time steps
    """
    var = []

    with open(file=file_name, mode='r') as f:
        data = f.readlines()

    for line in data:
        one_line = list(map(float, line.split()))
        var.append(one_line[1:-1])

    return var

def plot_one(grid, var, title, env):
    """
        Function to plot a single variable at initial and final iteration
    """
    fig, ax = plt.subplots(figsize=(10,10))

    ax.plot( grid , var[0] , label="Initial" , color="red" )
    ax.plot( grid , var[-1] , label="Final" , color="blue" )

    ax.set_title(title)
    ax.legend()

    plt.show()

def animate_one(grid, var):
    """
        Function to animate a single Variable from initial to final iteration
    """

    

# plot graphs based on mode being used by the user stored in the environment
env = get_env();

if env["mode"]=="COMPLETE":
    # all the data files are present in the /result directory
    grid = get_grid("result/ComputationalDomain.txt")
    var = get_vars("result/Density.txt")

    # plot
    plot_one(grid, var, "Density", env)
    


elif env["mode"]=="PARTIAL":
    grid = get_grid("result/ComputationalGrid.txt")
    var = get_vars("result/Density.txt")

    # plot
    plot_one(grid, var, "Density", env)

# elif mode=="PLOT-PARTIAL":
#     grid1 = get_grid("result1/ComputationalGrid.txt") 
#     grid2 = get_grid("result2/ComputationalGrid.txt")
    

# elif mode=="ANIMATE-ALL":
#     pass
# else:
#     print("---ERROR--- Please enter a correct mode ---")
