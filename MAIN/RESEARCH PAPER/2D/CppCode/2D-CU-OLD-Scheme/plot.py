# #* @author Lakshya Bamne(20MA20029) student @IIT Kharagpur, semester-7 (Mathematics and Computing)
# #* 1-Dimensional Central Upwind Scheme
# #* Supervisor - Prof. Naveen Kumar Garg (IIT Kharagpur, Dept. of Mathematics)

# # Python file to plot the graphs using data generated by the numerical scheme
# import numpy as np
# import matplotlib.pyplot as plt
# from matplotlib.animation import FuncAnimation
# from itertools import count

# # first we need to get the mode in which the program is run by the user
# def get_env():
#     """
#         Function to extract the mode in which the user has run the simulations
#         -> [COMPLETE] Single instance , store data for each time step
#         -> [PARTIAL] Single instance , store data only for initial and final steps
#         -> [PLOT-PARTIAL] Two instances , store data only for initial and final steps
#         -> [ANIMATE-ALL] Two instances , store data for each time step
#     """

#     env = {}

#     with open("env/env.txt", "r") as f:
#         lines = f.readlines()

#     env["mode"] = lines[0][:-1]
#     env["problem"] = lines[1][:-1]
#     env["grid points"] = int(lines[2][:-1])
#     env["domain"] = list(map(float, lines[3].split(" ")))

#     return env

# def get_grid(path):
#     """
#         Function to get the x-axix grid for simulation given it's path
#     """

#     with open(path, "r") as f:
#         grid = list(map(float, f.readline().split(' ')[:-1]))

#     return grid

# def get_vars(file_name):
#     """
#         Function to read one file containing values of a variable in a 
#         single 2D vector for all the time steps
#     """
#     var = []

#     with open(file=file_name, mode='r') as f:
#         data = f.readlines()

#     for line in data:
#         one_line = list(map(float, line.split()))
#         var.append(one_line[1:-1])

#     return var

# def plot():
#     """
#         Function to plot conserved and primitive variables at initial and final iteration
#         for both low and high precision

#         -> initial state
#         -> CU Scheme (low precision)
#         -> Reference (high precision)
#     """
    
#     # get the environment
#     env = get_env()

#     grid1 = get_grid("result/ComputationalDomain.txt")
#     density1 = get_vars("result/Density.txt")

#     vars1 = [density1]

#     fig, axd = plt.subplot_mosaic(
#         [
#             ['density']
#         ],
#         figsize=(10,10),
#         layout="constrained"
#     )

#     # add styling to the figure
#     fig.set_facecolor("lavender")

#     ind = 0
#     for ax in axd:
#         axd[ax].plot(grid1, vars1[ind][0], label=f"{ax} - Initial", color="black", linestyle="--")
#         axd[ax].plot(grid1, vars1[ind][-1], label=f"{ax} - CU Plot", color="purple")

#         axd[ax].legend()
#         axd[ax].set_title(ax)

#         ind += 1

#     # set super title for the plot
#     if env["problem"] == "MCW":
#         fig.suptitle("Moving Contact Wave")
#     elif env["problem"] == "SCW":
#         fig.suptitle("Stationary Contact Wave")
#     elif env["problem"] == "BLW":
#         fig.suptitle("Blastwave Problem")
#     elif env["problem"] == "LAX":
#         fig.suptitle("Lax Problem")
#     elif env["problem"] == "SOD":
#         fig.suptitle("Sod shock tube problem")
#     elif env["problem"] == "SPP":
#         fig.suptitle("Sonic point problem")
#     elif env["problem"] == "SSW":
#         fig.suptitle("Strong Shock wave problem")
#     elif env["problem"] == "MA3":
#         fig.suptitle("Mach-3 problem")
#     elif env["problem"] == "SDW":
#         fig.suptitle("Shock Density Wave")
#     elif env["problem"] == "SEW":
#         fig.suptitle("Shock Entropy Wave")

#     plt.savefig(f"plots/{env['problem']}.png")
#     plt.show()    

# def plot_ref():
#     env = get_env()

#     grid1 = get_grid("result1/ComputationalDomain.txt")
#     density1 = get_vars("result1/Density.txt")

#     grid2 = get_grid("result2/ComputationalDomain.txt")
#     density2 = get_vars("result2/Density.txt")

#     vars1 = [density1]
#     vars2 = [density2]

#     fig, axd = plt.subplot_mosaic(
#         [
#             ['density']
#         ],
#         figsize=(10,10),
#         layout="constrained"
#     )

#     # add styling to the figure
#     fig.set_facecolor("lavender")

#     ind = 0
#     for ax in axd:
#         axd[ax].plot(grid1, vars1[ind][0], label=f"{ax} - Initial", color="black", linestyle="--")
#         axd[ax].plot(grid1, vars1[ind][-1], label=f"{ax} - CU Plot", color="purple")
#         axd[ax].plot(grid2, vars2[ind][-1], label=f"{ax} - REF Plot", color="red")

#         axd[ax].legend()
#         axd[ax].set_title(ax)

#         ind += 1

#     # set super title for the plot
#     if env["problem"] == "MCW":
#         fig.suptitle("Moving Contact Wave")
#     elif env["problem"] == "SCW":
#         fig.suptitle("Stationary Contact Wave")
#     elif env["problem"] == "BLW":
#         fig.suptitle("Blastwave Problem")
#     elif env["problem"] == "LAX":
#         fig.suptitle("Lax Problem")
#     elif env["problem"] == "SOD":
#         fig.suptitle("Sod shock tube problem")
#     elif env["problem"] == "SPP":
#         fig.suptitle("Sonic point problem")
#     elif env["problem"] == "SSW":
#         fig.suptitle("Strong Shock wave problem")
#     elif env["problem"] == "MA3":
#         fig.suptitle("Mach-3 problem")
#     elif env["problem"] == "SDW":
#         fig.suptitle("Shock Density Wave")
#     elif env["problem"] == "SEW":
#         fig.suptitle("Shock Entropy Wave")

#     plt.savefig(f"plots/{env['problem']}.png")
#     plt.show()

# #! Plot the results
# env = get_env()

# if env["mode"]=="PLOT-PARTIAL":
#     plot_ref()
# else:
#     plot()

import matplotlib.pyplot as plt

def get_grids(file_name: str) -> tuple[list]:
    """
        Function to get the computational grids
    """

    with open(file_name, "r") as f:
        lines = f.readlines()

    x = list(map(float, lines[0].split(" ")[:-1]))
    y = list(map(float, lines[1].split(" ")[:-1]))

    return (x,y)


def get_output():
    """
        Function to get the output densitites after CU Scheme is run
    """
    initial_density_file = "result/density0.txt"
    final_density_file = "result/density1.txt"

    with open(initial_density_file, "r") as f:
        init_lines = f.readlines()

    with open(final_density_file, "r") as f:
        final_lines = f.readlines()

    initial_density = []
    final_density = []

    size = len(init_lines)

    for i in range(size):
        initial_density.append( list(map(float, init_lines[i].split(" ")[:-1])) )
        final_density.append( list(map(float, final_lines[i].split(" ")[:-1])) )

    return (initial_density, final_density)

def plot(grids, density, title):
    """
        Function to plot the initial and final densities
    """

    # plot the read data
    fig, axd = plt.subplot_mosaic(
        [
            ['INITIAL','CU']
        ],
        figsize=(10,10),
        layout="constrained"
    )
    
    # Initial heat map
    hm1 = axd["INITIAL"].imshow(
        density[0],
        cmap="jet",
        extent=[ 0, 1.2 , 0 , 1.2 ],    
    )
    axd["INITIAL"].set_title("Initial Density")
    fig.colorbar(hm1, ax=axd["INITIAL"])

    # CU heat map
    hm1 = axd["CU"].imshow(
        density[1],
        cmap="jet",
        extent=[ 0, 1.2 , 0 , 1.2 ],    
    )
    axd["CU"].set_title("Central Upwind Scheme (Old)")
    fig.colorbar(hm1, ax=axd["CU"])

    fig.suptitle(f"2D Riemann Problem (Density) - {title}")

    plt.savefig(f"2DR(CU)-{title}.png")
    plt.show()


grids = get_grids("result/ComputationalDomain.txt")
density = get_output()

plot(grids, density, "2DR-CFG3")


